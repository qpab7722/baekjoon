import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.LinkedList;

public class Main {
    public static void main(String args[])throws IOException {
      
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      StringBuilder sb = new StringBuilder();
     
     //입력받을 원소의 개수
      int N = Integer.parseInt(br.readLine());
      
   
     //배열에 값 입력
      int array[] = new int[N];
      for(int i=0; i<N;i++)
      array[i]= Integer.parseInt(br.readLine());
      
      quickSort(array,0,N-1);
     
        
     for(int z=0;z<N;z++)
        sb.append(array[z] + "\n");
        
     System.out.println(sb);
    }
    
    public static void quickSort(int[] arr, int left,int right){
        
        //분할 종료 조건
        if(left>=right)
            return;
        
        //피벗위치 받아옴
        int pivot = partition( arr,  left, right);
        
        quickSort(arr,left,pivot-1);
        quickSort(arr,pivot+1,right);
    }
    
    public static int partition(int[] arr, int left, int right){
        int mid = (left+right)/2;
        swap(arr,left,mid);
        
        int pivot = arr[left];
        int i=left;
        int j= right;
        
        while(i<j){
            //오른쪽 탐색값중 더 작은것 탐색
            while(arr[j]>pivot){
                j--;
            }
            //j의값이 변했음으로 재검사, 왼쪽 탐색값이 터 큰것 탐색
            while( i<j && arr[i]<=pivot){
                i++;
            }
            swap(arr,i,j);
        }
        arr[left]=arr[i];
        arr[i]=pivot;
        
        return i;
    }
    
    public static void swap(int arr[],int a, int b){
        int temp=0;
        temp=arr[a];
        arr[a]=arr[b];
        arr[b]=temp;
    }
}
