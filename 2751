import java.util.Arrays;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {

    
    public static void main(String args[])throws IOException {
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
       StringBuilder sb = new StringBuilder();
      int N = Integer.parseInt(br.readLine());
    
    
    int array[] = new int[N];
    
    for(int e=0;e<N;e++)
        array[e]= Integer.parseInt(br.readLine());
    
    mergesort(array,0,array.length-1);
    
     for(int z=0;z<N;z++)
        sb.append(array[z] + "\n");
     System.out.println(sb);
 
    
    }
    public static void mergesort(int array[],int left, int right){
        if(left<right){
             int mid = (left+right)/2;// 기존 array 기준 위치
             //mid 기준 분할
             mergesort(array,left,mid);
             mergesort(array,mid+1,right);
             // 합치면서 정렬(기존 배열 인덱스 기준으로)
             merge(array,left,mid,right);
        }
    }
    public static void merge(int array[],int left,int mid, int right){
        int lA[] =Arrays.copyOfRange(array,left,mid+1);
        int rA[] =Arrays.copyOfRange(array,mid+1,right+1);
        
        int i=0, j=0, k=left;
        int lL=lA.length, rL=rA.length;
        //합칠 두 배열의 가장 왼쪽부터 채움
        while(i<lL&&j<rL){
            if(lA[i]<=rA[j]){
                 array[k]=lA[i];
                 i++;
            }else{
                array[k]=rA[j];
                j++;
            }
               k++;// 다음 위치
        }
        
        //한쪽이 먼저 끝났을경우 남은 배열 채움
        while(i<lL)
            array[k++]= lA[i++];
        while(j<rL)
            array[k++]=rA[j++];
        
    }
}
