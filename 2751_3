import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.LinkedList;

public class Main {
    public static void main(String args[])throws IOException {
      
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      StringBuilder sb = new StringBuilder();
     
     //입력받을 원소의 개수
      int N = Integer.parseInt(br.readLine());
      
      
      
   
     //배열에 값 입력
      int array[] = new int[N];
      for(int i=0; i<N;i++)
      array[i]= Integer.parseInt(br.readLine());
      
       heapSort(array);
     
        
     for(int z=0;z<N;z++)
        sb.append(array[z] + "\n");
        
        
     System.out.println(sb);
    }
    
   public static void heapSort(int[] arr){
       int n= arr.length;
       
       //초기화, 배열-> 힙으로 만듬
       // 인덱스  i = n/2-1부터 시작 (단말노드가 아닌 노드i 의 자식 노드는 (i*2+1),(i*2+2))
       // 즉 n/2-1부터 시작하면 자식 n까지 모든 노드를 검사하게 됨. 
       for(int i= n/2-1; i>=0;i--)
        heapify(arr,n,i);
       
       //루트노드 추출, i--로 힙의 사이즈 줄임
       for(int i=n-1;i>0;i--){
           swap(arr,0,i);// 자식노드를 부모노드의 위치로(힙의 사이즈가 줄면서 추출됨, 즉 위치가 결정됨)
           heapify(arr,i,0);//  재정렬
       }
       
   }
    
    //힙 성질을 만족하게 만드는 함수, 자식노드와 비교하면서 교환함
    public static void heapify(int[] arr,int n,int i){
        int p= i;//최대값
        int l= i*2 + 1;//왼자식 인덱스
        int r= i*2 + 2;//오른자식 인덱스
        
        //왼쪽자식보다 현재 노드가 작다면 옮길위치는 l
        if(l<n && arr[p]<arr[l])
            p=l;
            
        if(r<n && arr[p]<arr[r])
            p=r;
        //최대값이 아니여서 위치 변경이 필요하다면    
        if(i!=p){
            swap(arr,p,i);
            heapify(arr,n,p);//이동된 위치부터 다시 자식 검사
        }
    }
    
    public static void swap(int arr[],int a, int b){
        int temp=0;
        temp=arr[a];
        arr[a]=arr[b];
        arr[b]=temp;
    }
}
